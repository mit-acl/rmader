###############################################################
# Copyright 2022, Kota Kondo, Aerospace Controls Laboratory
# Massachusetts Institute of Technology
# All Rights Reserved
# Authors: Kota Kondo, et al.
# See LICENSE file for the license information
###############################################################

###############################################################
# Essential Setting Parameters
###############################################################

# use highbay space?
space_size: "full_highbay_size" # "infinite_size"/"west_highbay_size"/"full_highbay_size"/"infinite_above_ground_size"

# need take off?
is_take_off: true

# use centralized or decentralized trajs?
is_centralized: false

# use delay check or not? (this has to be true if we wanna use RMADER)
is_delaycheck: true

# using opt+check+delay check or opt+delay check
is_check: true

# use optimistic dc?
is_optimistic_dc: false

# agents' ids
agents_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# agents_ids: [2, 3, 4, 5, 6, 8]

# who's the camera man? (if you are camera man is_camera_yawing will be true in rmader_ros.cpp)
camera1: "07"
camera2: "05"

# introduce artificial comm delay?
is_artificial_comm_delay: false

# replan after reached goal?
is_replan_after_goal_reached: true

# for obstacles, we use /trajs without any communicatoin delays, and for agents, we introduce comm delays
is_obs_sim: false

###############################################################
# adaptive delay related Parameters
###############################################################

adpt:
  # use adaptive delay check?
  is_adaptive_delaycheck: false
  initial_adaptive_delay_check: 0.05 #[s]
  adpt_freq_msgs: 10 #every how many msgs we update delay check
  weight: 0.5 # adapt_dc = weight * new_adapt_dc + (1-weight) * old_adapt_dc

###############################################################
# RMADER Performance Parameters
###############################################################

yaw:
  w_max: 1.0           # [rd/s] Maximum angular velocity. 0.4 for Hardware
  alpha_filter_dyaw: 0.99 # Filter parameter for dyaw, \in [0,1]. Higher--> More aggressive filtering

visual:
  is_visual: true #publish visualization stuff
  color_type: "vel" #"vel" or "plain"
  n_agents: 10
  res_plot_traj: 25.0  #Higher --> More resolution when plotting the trajectory 

setting:
  dc: 0.01            #(seconds) Duration for the interpolation=Value of the timer pubGoal
  goal_radius: 0.15    #(m) Drone has arrived to the goal when distance_to_goal<GOAL_RADIUS

tuning_param:
  drone_bbox: [0.8, 0.8, 0.5] #(m) Used for collision checking replacing drone_radius. The bounding box dimension [x y z]
  Ra: 30.0           # [m] Radius of my planning sphere (planning horizon). Should be < fov_depth
  delay_check_sec: 0.05 # seconds
  simulated_comm_delay_sec: 0.05 #seconds
  comm_delay_param: 1.0
  v_max: [3.0, 3.0, 3.0]   #[m/s]  7.0
  a_max: [4.0, 4.0, 4.0]   #[m/s2] Note that if a_max.z() > 9.81, the drone may flip
  j_max: [5.0, 5.0, 5.0]   #[m/s3]  #Right now it's only used for Gurobi, not for NLOPT

basis: "MINVO"  #MINVO OR B_SPLINE or BEZIER.  This is the basis used for collision checking
alpha_shrink: 0.9 #\in [0,1] Only used for MINVO/Bezier
alpha: 0.1 #[m] Error in position
beta: 0.1 #[m] Deviation between the trajectory and the segment between two discretization points
gamma: 0.1 #[seconds] >0 Time step between discretization points

###############################################################
# Optimization Parameters
###############################################################

opt:
  # kappa + mu <=1 Ideally kappa + mu<1 (so that there is time for other stuff)
  upper_bound_runtime_snlopt: 1.0 #[seconds] snlopt (init guess + solver) will never take longer than this amount of seconds
  lower_bound_runtime_snlopt: 0.05 #[seconds] snlopt (init guess + solver) will never take less than this amount of seconds
  kappa: 0.4 #% of time spent to find initial guess
  mu: 0.4    #% of time spent to solve the optimization

  # Samples in velocity for the A* guess used in the nlopt optimization problem
  a_star_samp_x: 5 # odd number
  a_star_samp_y: 5 # odd number
  a_star_samp_z: 5 # odd number
  a_star_fraction_voxel_size: 0.1 #\in [0,1] The higher, the bigger the voxel size in A* is(i.e. more prunning)
  allow_infeasible_guess: true  #whether allow infeasible guesses to be used for the optimization. If false, straight line guess will be used in the case of an infeasible guess

  a_star_bias: 0.0 #Bias (cost=g+bias*h) in the A* search #default is 1.0

  factor_alpha: 2.5 #[-] DeltaT = factor_alpha*States_took_previous_replan
  factor_alloc: 1.0 #>=1. Used to find the total duration of a given trajectory.
  factor_alloc_close: 2.5 #>=1. Used to find the total duration of a given trajectory. When an agent gets close to the goal, we see a very short traj, so allocate more time for optimization
  dist_factor_alloc_close: 5.0 #>=1. When dist to goal is < than this, the factor_alloc_close is used (instead of factor_alloc)

  weight: 10.0 #The .0 is needed #1000.0 was default 

###############################################################
# Environmental Parameters (usually no need to change)
###############################################################

infinite_size:
  x_min: -1000000000.0  # [m] don't forget the .0
  x_max: 1000000000.0  # [m] don't forget the .0

  y_min: -1000000000.0  # [m] don't forget the .0
  y_max: 1000000000.0   # [m] don't forget the .0

  z_min: -1000000000.0  # [m] points below this are considered ground
  z_max: 1000000000.0   # [m] JPS is not allowed to give a solution that goes higher than this height

infinite_above_ground_size:
  x_min: -1000000000.0  # [m] don't forget the .0
  x_max: 1000000000.0  # [m] don't forget the .0

  y_min: -1000000000.0  # [m] don't forget the .0
  y_max: 1000000000.0   # [m] don't forget the .0

  z_min: -0.5  # [m] points below this are considered ground
  z_max: 7.0   # [m] JPS is not allowed to give a solution that goes higher than this height


west_highbay_size:
  x_min: -4.3  # [m] don't forget the .0
  x_max: 4.8  # [m] don't forget the .0

  y_min: -4.0  # [m] don't forget the .0
  y_max: 4.3   # [m] don't forget the .0

  z_min: 0.9  # [m] don't forget the .0
  z_max: 3.2  # [m] don't forget the .0

full_highbay_size:
  x_min: -4.3  # [m] don't forget the .0
  x_max: 15.4  # [m] don't forget the .0

  y_min: -3.5  # [m] don't forget the .0
  y_max: 4.1   # [m] don't forget the .0

  z_min: 0.9  # [m] don't forget the .0
  z_max: 3.5  # [m] don't forget the .0

###############################################################
# NLOPT Parameters (usually no need to change)
###############################################################

nlopt:
  num_pol: 4
  deg_pol: 3 #Only 3 is supported right now
  epsilon_tol_constraints: 0.000001
  xtol_rel: 0.0000000000001 #negative value --> stopping criterion not used
  ftol_rel: 0.0000000001 #negative value --> stopping criterion not used
  solver: "LD_MMA"

#Other possible solvers:
# LD_MMA, LD_CCSAQ, LN_NELDERMEAD,  LD_LBFGS, LD_VAR2, LD_AUGLAG, LD_SLSQP, LN_SBPLX, LN_PRAXIS, ...
# LD_AUGLAG_EQ, LN_BOBYQA, LN_NEWUOA, LN_NEWUOA_BOUND, LN_COBYLA, LD_CCSAQ, LD_TNEWTON_PRECOND_RESTART, ...
# LD_TNEWTON_RESTART, LD_TNEWTON_PRECOND, LD_VAR1, LD_LBFGS_NOCEDAL, COBYLA